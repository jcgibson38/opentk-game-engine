#version 400 core

in vec4 clipSpaceCoords;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 outColor;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D waterTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform vec3 lightColor;

uniform float distortionVariance;

const float distortionStrength = 0.01;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main(void)
{
	vec2 deviceSpaceCoords = (clipSpaceCoords.xy / clipSpaceCoords.w) / 2.0 + 0.5;
	vec2 refractionTextureCoords = vec2(deviceSpaceCoords.x, deviceSpaceCoords.y);
	vec2 reflectionTextureCoords = vec2(deviceSpaceCoords.x, -deviceSpaceCoords.y);

	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + distortionVariance, textureCoords.y)).rg * 0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + distortionVariance);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * distortionStrength;

	refractionTextureCoords += totalDistortion;
	refractionTextureCoords = clamp(refractionTextureCoords,0.001, 0.999);
	reflectionTextureCoords += totalDistortion;
	reflectionTextureCoords.x = clamp(reflectionTextureCoords.x, 0.001, 0.999);
	reflectionTextureCoords.y = clamp(reflectionTextureCoords.y, -0.999, -0.001);

	vec4 reflectionColor = texture(reflectionTexture, reflectionTextureCoords);
	vec4 refractionColor = texture(refractionTexture, refractionTextureCoords);
	vec4 waterColor = texture(waterTexture, textureCoords);

	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, vec3(0.0, 1.0, 0.0));
	refractiveFactor = pow(refractiveFactor,2.0);

	vec4 normalMapColor = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b, normalMapColor.g * 2.0 - 1.0);
	normal = normalize(normal);

	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColor * specular * reflectivity;
	
	outColor = mix(reflectionColor, refractionColor, refractiveFactor);
	outColor = mix(outColor, waterColor, 0.5) + vec4(specularHighlights,0.0);
}